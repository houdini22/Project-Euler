/*
 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */

var inc = 0;
var inc2 = 0;
var result = 0;
var permutationsCache = [];

function getPermutations(length) {
    let result = [];
    for (let i = 0; i < (1 << length); i++) {
        let current = [];
        for (let j = 0; j < length; j++) {
            current.push(i & (1 << j) ? false: true);
        }
        result.push(current);
    }
    return result;
}

for (let i = 0; ; i += 1) {
    inc += i;
    inc2 = inc;

    let factor = 2;
    let primeNumbers = [];

    while (factor <= inc2) {
        if (inc2 % factor === 0) {
            inc2 /= factor;
            primeNumbers.push(factor);
        } else {
            factor += 1;
        }
    }

    if(!permutationsCache[primeNumbers.length]) {
        permutationsCache[primeNumbers.length] = getPermutations(primeNumbers.length);
    }

    let divisors = primeNumbers.concat();
    
    permutationsCache[primeNumbers.length].forEach((arr) => {
        let divisor = 1;
        arr.forEach((bool, index) => {
            if(bool) {
                divisor *= primeNumbers[index];
            }
        });
        divisors.push(divisor);
    });
    divisors.push(1);
    divisors.push(inc);

    divisors = Array.from(new Set(divisors));
    if(divisors.length > 500) {
        result = inc;
        break;
    }
}

console.log('RESULT:', result);